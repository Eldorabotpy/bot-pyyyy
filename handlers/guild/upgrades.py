# handlers/guild/upgrades.py (Vers√£o Corrigida)

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackQueryHandler

from modules import player_manager, clan_manager
from modules.game_data.clans import CLAN_PRESTIGE_LEVELS

# ‚úÖ 1. IMPORTA√á√ïES CORRIGIDAS: Fun√ß√µes v√™m do ficheiro central de utilit√°rios.
from ..utils import create_progress_bar, format_buffs_text

# --- L√≥gica de Aprimoramento do Cl√£ ---

async def show_clan_upgrade_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Mostra o menu de aprimoramento, com custos e benef√≠cios do pr√≥ximo n√≠vel."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    clan_id = player_manager.get_player_data(user_id).get("clan_id")
    if not clan_id:
        await query.edit_message_caption(caption="Voc√™ n√£o est√° em um cl√£.")
        return
        
    clan_data = clan_manager.get_clan(clan_id)
    
    # Apenas o l√≠der pode ver este menu
    if clan_data.get("leader_id") != user_id:
        await context.bot.answer_callback_query(query.id, "Apenas o l√≠der do cl√£ pode aceder a este menu.", show_alert=True)
        return
        
    current_level = clan_data.get("prestige_level", 1)
    current_points = clan_data.get("prestige_points", 0)
    
    current_level_info = CLAN_PRESTIGE_LEVELS.get(current_level, {})
    next_level_info = CLAN_PRESTIGE_LEVELS.get(current_level + 1)

    caption = f"‚öúÔ∏è <b>Aprimorar Cl√£: {clan_data.get('display_name')}</b> ‚öúÔ∏è\n\n"
    caption += f"<b>N√≠vel de Prest√≠gio Atual:</b> {current_level} ({current_level_info.get('title', '')})\n"
    
    caption += "<b>Buffs Ativos:</b>\n"
    # ‚úÖ 2. NOMES DE FUN√á√ïES ATUALIZADOS (sem underscore)
    caption += format_buffs_text(current_level_info.get("buffs", {}))
    
    keyboard = []
    
    if next_level_info:
        points_needed = current_level_info.get("points_to_next_level", 999999)
        # ‚úÖ 2. NOMES DE FUN√á√ïES ATUALIZADOS (sem underscore)
        progress_bar = create_progress_bar(current_points, points_needed)
        
        caption += f"\n<b>Progresso para o N√≠vel {current_level + 1}:</b>\n"
        caption += f"Prest√≠gio: {progress_bar} {current_points}/{points_needed}\n"
        
        caption += "\n<b>Benef√≠cios do Pr√≥ximo N√≠vel:</b>\n"
        caption += f"   - Membros: {next_level_info.get('max_members', 0)}\n"
        caption += format_buffs_text(next_level_info.get("buffs", {}))

        upgrade_cost = next_level_info.get("upgrade_cost", {})
        cost_gold = upgrade_cost.get("gold", 0)
        cost_dimas = upgrade_cost.get("dimas", 0)
        
        caption += "\n<b>Custo do Aprimoramento:</b>\n"
        caption += f"   - ü™ô {cost_gold:,} Ouro\n"
        caption += f"   - üíé {cost_dimas} Dimas\n"
        
        if current_points >= points_needed:
            caption += "\n<b>Voc√™ tem prest√≠gio suficiente para aprimorar!</b>"
            keyboard.append([
                InlineKeyboardButton("ü™ô Aprimorar com Ouro", callback_data='clan_upgrade_confirm:gold'),
                InlineKeyboardButton("üíé Aprimorar com Dimas", callback_data='clan_upgrade_confirm:dimas'),
            ])
    else:
        caption += "\n<b>O seu cl√£ j√° atingiu o n√≠vel m√°ximo de prest√≠gio!</b>"

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Voltar", callback_data='clan_manage_menu')])
    
    await query.edit_message_caption(caption=caption, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='HTML')


async def confirm_clan_upgrade_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o clique no bot√£o para subir o n√≠vel do cl√£."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    clan_id = player_manager.get_player_data(user_id).get("clan_id")
    payment_method = query.data.split(':')[1]
    
    try:
        clan_manager.level_up_clan(clan_id, user_id, payment_method)
        
        clan_data = clan_manager.get_clan(clan_id)
        clan_name = clan_data.get("display_name")
        new_level = clan_data.get("prestige_level")

        await context.bot.answer_callback_query(
            query.id,
            f"Parab√©ns! O cl√£ {clan_name} subiu para o n√≠vel {new_level}!",
            show_alert=True
        )
        
        for member_id in clan_data.get("members", []):
            if member_id != user_id:
                try:
                    await context.bot.send_message(
                        chat_id=member_id,
                        text=f"üéâ Boas not√≠cias! O seu cl√£, {clan_name}, subiu para o n√≠vel de prest√≠gio {new_level}!"
                    )
                except Exception:
                    pass

    except ValueError as e:
        await context.bot.answer_callback_query(query.id, str(e), show_alert=True)
        
    # ‚úÖ 3. IMPORTA√á√ÉO LOCAL: Mais segura para evitar erros de importa√ß√£o circular.
    from handlers.guild.dashboard import show_clan_dashboard
    # Atualiza o painel do cl√£ para refletir o novo n√≠vel
    await show_clan_dashboard(update, context)

# --- Defini√ß√£o dos Handlers ---
clan_upgrade_menu_handler = CallbackQueryHandler(show_clan_upgrade_menu, pattern=r'^clan_upgrade_menu$')
clan_upgrade_confirm_handler = CallbackQueryHandler(confirm_clan_upgrade_callback, pattern=r'^clan_upgrade_confirm:(gold|dimas)$')