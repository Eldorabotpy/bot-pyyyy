# handlers/class_gate.py

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from modules import player_manager

# Callback de abertura: ajuste para o que seu class_selection_handler espera.
CLASS_OPEN_CALLBACK = "class_open"

async def maybe_offer_class_choice(user_id: int, chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Se o jogador precisar escolher classe, envia uma mensagem com o bot√£o para abrir o menu de classes.
    Garante que s√≥ envia uma vez (marca flag no save).
    """
    # <<< CORRE√á√ÉO 1: Adiciona await >>>
    pdata = await player_manager.get_player_data(user_id)
    if not pdata:
        return # Se n√£o encontrar dados, sai silenciosamente

    # Assumindo que needs_class_choice √© s√≠ncrono (apenas verifica o dicion√°rio pdata)
    if not player_manager.needs_class_choice(pdata):
        return

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ú® Escolher Classe", callback_data=CLASS_OPEN_CALLBACK)]
    ])

    txt = (
        "üéâ <b>N√≠vel 10 alcan√ßado!</b>\n"
        "Voc√™ desbloqueou a <b>escolha de classe</b>. Toque no bot√£o abaixo para escolher."
    )
    # <<< CORRE√á√ÉO 2: Adiciona await (j√° estava correto) >>>
    await context.bot.send_message(chat_id=chat_id, text=txt, reply_markup=kb, parse_mode="HTML")

    # Marca que j√° oferecemos
    # <<< CORRE√á√ÉO 3: Adiciona await >>>
    # (Assumindo que mark_class_choice_offered √© async porque salva os dados)
    await player_manager.mark_class_choice_offered(user_id)